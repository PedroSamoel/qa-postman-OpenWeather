{
	"info": {
		"_postman_id": "3e024122-be08-4321-ab21-3f8e3e610b45",
		"name": "QA Portfolio – OpenWeather v3.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46825438",
		"_collection_link": "https://pedrosamoel.postman.co/workspace/QA--Testando-OpenWeather-(3.0)~3f288c16-a508-47a5-96fd-79f2c196a0a5/collection/46825438-3e024122-be08-4321-ab21-3f8e3e610b45?action=share&source=collection_link&creator=46825438"
	},
	"item": [
		{
			"name": "Clima Atual",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ✅ Valida se a API respondeu com status 200\r",
							"pm.test(\"Status code é 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// ✅ Verifica se a resposta está no formato JSON\r",
							"pm.test(\"Resposta é um formato JSON\", () => {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// ✅ Captura o corpo da resposta como objeto\r",
							"const jsonDataBase = pm.response.json();\r",
							"\r",
							"// ✅ Verifica se latitude e longitude retornadas estão corretas\r",
							"pm.test(\"Latitude e longitude corretas\", () => {\r",
							"    pm.expect(jsonDataBase.lat).to.be.closeTo(parseFloat(pm.environment.get(\"lat\")), 0.5);\r",
							"    pm.expect(jsonDataBase.lon).to.be.closeTo(parseFloat(pm.environment.get(\"lon\")), 0.5);\r",
							"});\r",
							"\r",
							"// ✅ Confere se a temperatura atual é um número\r",
							"pm.test(\"Temperatura atual é numérica\", () => {\r",
							"    pm.expect(jsonDataBase.current.temp).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"// ✅ Confere se existe a descrição do clima\r",
							"pm.test(\"Descrição climática existe\", () => {\r",
							"    pm.expect(jsonDataBase.current.weather[0]).to.have.property(\"description\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/data/3.0/onecall?lat={{lat}}&lon={{lon}}&appid={{apiKey}}&units={{units}}&lang={{lang}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"data",
						"3.0",
						"onecall"
					],
					"query": [
						{
							"key": "lat",
							"value": "{{lat}}"
						},
						{
							"key": "lon",
							"value": "{{lon}}"
						},
						{
							"key": "appid",
							"value": "{{apiKey}}"
						},
						{
							"key": "units",
							"value": "{{units}}"
						},
						{
							"key": "lang",
							"value": "{{lang}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Previsão Horária",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Captura a resposta completa da API e transforma em objeto\r",
							"const jsonDataBase = pm.response.json();\r",
							"\r",
							"// Extrai apenas a parte da previsão horária (array hourly[])\r",
							"const hourly = jsonDataBase.hourly;\r",
							"\r",
							"// ✅ Teste 1: Confere se todas as propriedades principais estão presentes em hourly[0]\r",
							"pm.test(\"Todas as propriedades principais de hourly existem\", () => {\r",
							"    const propriedadesHourly = [\r",
							"        'dt', 'temp', 'feels_like', 'pressure', 'humidity', \r",
							"        'dew_point', 'uvi', 'clouds', 'visibility', \r",
							"        'wind_speed', 'wind_deg', 'wind_gust', 'pop'\r",
							"    ];\r",
							"\r",
							"    // Verifica cada propriedade listada acima\r",
							"    propriedadesHourly.forEach(prop => {\r",
							"        pm.expect(hourly[0]).to.have.property(prop);\r",
							"    });\r",
							"\r",
							"    // Confere se weather[0] (que é um array) tem ao menos a descrição\r",
							"    pm.expect(hourly[0].weather[0]).to.have.property(\"description\");\r",
							"});\r",
							"\r",
							"// ✅ Teste 2: Garante que o array hourly não está vazio\r",
							"pm.test(\"API retornou os dados de hourly\", () => {\r",
							"    pm.expect(hourly.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"// ✅ Teste 3: Confere se a primeira previsão possui o campo 'dt' (timestamp)\r",
							"pm.test(\"Os dados de hourly contêm a chave 'dt'\", () => {\r",
							"    pm.expect(hourly[0]).to.have.property('dt');\r",
							"});\r",
							"\r",
							"// ✅ Teste 4: Confere se os dados de temperatura da primeira previsão são numéricos\r",
							"pm.test(\"Os dados de hourly contêm dados de temperatura\", () => {\r",
							"    pm.expect(hourly[0].temp).to.be.a(\"number\");\r",
							"    pm.expect(hourly[0].feels_like).to.be.a(\"number\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/data/3.0/onecall?lat={{lat}}&lon={{lon}}&appid={{apiKey}}&units={{units}}&lang={{lang}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"data",
						"3.0",
						"onecall"
					],
					"query": [
						{
							"key": "lat",
							"value": "{{lat}}"
						},
						{
							"key": "lon",
							"value": "{{lon}}"
						},
						{
							"key": "appid",
							"value": "{{apiKey}}"
						},
						{
							"key": "units",
							"value": "{{units}}"
						},
						{
							"key": "lang",
							"value": "{{lang}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Previsão Diária",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Captura a resposta JSON e converte em objeto JS\r",
							"const jsonDataBase = pm.response.json();\r",
							"// Extrai apenas as propriedades de previsão diária\r",
							"const dataDaily = jsonDataBase.daily;\r",
							"\r",
							"// ✅ Test 1: Garante que a previsão diária existe e não está vazia\r",
							"pm.test(\"API retornou dados de previsão diária\", () => {\r",
							"    pm.expect(dataDaily.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"// ✅ Test2: Confere se propriedade daily possui 'dt' e 'temp' definidos\r",
							"pm.test(\"Primeiro dia contém capos 'dt' e 'temp'\", () => {\r",
							"    pm.expect(dataDaily[0]).to.have.property(\"dt\")\r",
							"    pm.expect(dataDaily[0]).to.have.property(\"temp\")\r",
							"    pm.expect(dataDaily[0]).to.have.property(\"humidity\")\r",
							"    pm.expect(dataDaily[0]).to.have.property(\"pressure\")\r",
							"    pm.expect(dataDaily[0]).to.have.property(\"clouds\")\r",
							"});\r",
							"\r",
							"// ✅ Test3: Verifica se a temperatura mínima e máxima estão presentes\r",
							"pm.test(\"Verifica se existem temperaturas minimas e máximas\", () => {      \r",
							"    pm.expect(dataDaily[0].temp).to.have.property(\"min\")\r",
							"    pm.expect(dataDaily[0].temp).to.have.property(\"max\")\r",
							"});\r",
							"\r",
							"// ✅ Test4: Verifica se min e max sao valores numéricos\r",
							"pm.test(\"Min e mas são valores numéricos\", () => {\r",
							"    pm.expect(dataDaily[0].temp.min).to.be.a(\"number\")\r",
							"    pm.expect(dataDaily[0].temp.max).to.be.a(\"number\")\r",
							"})\r",
							"\r",
							"// ✅ Test5: Confere se há descrição de clima\r",
							"pm.test(\"Verifica se há descrição de clima\", () => {\r",
							"    pm.expect(dataDaily[0].weather[0]).to.have.property(\"description\")\r",
							"});\r",
							"\r",
							"// ✅ Teste 6: Confere campos adicionais (umidade, pressão, nuvens)\r",
							"pm.test(\"Contém dados adicionais (umidade, pressão, nuvens)\", () => {\r",
							"    pm.expect(dataDaily[0]).to.have.property(\"humidity\");\r",
							"    pm.expect(dataDaily[0]).to.have.property(\"pressure\");\r",
							"    pm.expect(dataDaily[0]).to.have.property(\"clouds\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{vault:openweather-api:value}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "appid",
							"type": "string"
						},
						{
							"key": "in",
							"value": "query",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/data/3.0/onecall?lat={{lat}}&lon={{lon}}&appid={{apiKey}}&units={{units}}&lang={{lang}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"data",
						"3.0",
						"onecall"
					],
					"query": [
						{
							"key": "lat",
							"value": "{{lat}}"
						},
						{
							"key": "lon",
							"value": "{{lon}}"
						},
						{
							"key": "appid",
							"value": "{{apiKey}}"
						},
						{
							"key": "units",
							"value": "{{units}}"
						},
						{
							"key": "lang",
							"value": "{{lang}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Alertas Meteorológicos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Captura a resposta da API já convertida em objeto JS\r",
							"const jsonDataBase = pm.response.json();\r",
							"\r",
							"// Extrai a parte de alertas, se existir\r",
							"const dataAlerts = jsonDataBase.alerts;\r",
							"\r",
							"// ✅ Teste 1: Verifica se 'alerts' existe OU não está definido\r",
							"pm.test(\"Campo 'alerts' pode existir ou estar ausente (dependendo da região)\", () => {\r",
							"    pm.expect(jsonDataBase.hasOwnProperty(\"alerts\") || jsonDataBase.alerts === undefined).to.be.true;\r",
							"});\r",
							"\r",
							"// ✅ Se houver alertas, validar conteúdo\r",
							"if (dataAlerts && dataAlerts.length > 0) {\r",
							"\r",
							"    // Teste 2: Garante que a API retornou pelo menos 1 alerta\r",
							"    pm.test(\"API retornou pelo menos 1 alerta meteorológico\", () => {\r",
							"        pm.expect(dataAlerts.length).to.be.above(0);\r",
							"    });\r",
							"\r",
							"    // Teste 3: Confere se o primeiro alerta tem o campo 'event'\r",
							"    pm.test(\"Primeiro alerta contém o campo 'event' (nome do fenômeno)\", () => {\r",
							"        pm.expect(dataAlerts[0]).to.have.property(\"event\");\r",
							"    });\r",
							"\r",
							"    // Teste 4: Confere se o primeiro alerta tem o campo 'description'\r",
							"    pm.test(\"Primeiro alerta contém o campo 'description' (detalhes do fenômeno)\", () => {\r",
							"        pm.expect(dataAlerts[0]).to.have.property(\"description\");\r",
							"    });\r",
							"\r",
							"    // Teste 5: Confere se o primeiro alerta possui datas de início e fim\r",
							"    pm.test(\"Primeiro alerta contém as propriedades 'start' e 'end' (período de vigência)\", () => {\r",
							"        pm.expect(dataAlerts[0]).to.have.property(\"start\");\r",
							"        pm.expect(dataAlerts[0]).to.have.property(\"end\");\r",
							"    });\r",
							"\r",
							"} else {\r",
							"    // ✅ Se não houver alertas, apenas loga no console\r",
							"    console.log(\"Nenhum alerta meteorológico ativo no momento para essa região.\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/data/3.0/onecall?lat={{lat}}&lon={{lon}}&appid={{apiKey}}&units={{units}}&lang={{lang}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"data",
						"3.0",
						"onecall"
					],
					"query": [
						{
							"key": "lat",
							"value": "{{lat}}"
						},
						{
							"key": "lon",
							"value": "{{lon}}"
						},
						{
							"key": "appid",
							"value": "{{apiKey}}"
						},
						{
							"key": "units",
							"value": "{{units}}"
						},
						{
							"key": "lang",
							"value": "{{lang}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Casos Negativos",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}",
					"host": [
						"{{base_url}}"
					]
				}
			},
			"response": []
		}
	]
}